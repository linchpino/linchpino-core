
name: Build and Deploy Current Branch to linchpino-core-dev server

on:
  pull_request:
      branches: [development,Sonar-New-Code-coverage-is-not-matched-with-Jacoco]
      types: [opened,reopened]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  Sonar-Build:
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.sonar-build-status.outputs.coverage }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven cloud
        id: sonar-build-status
        run: |
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
          -Dsonar.projectKey=linchpino_linchpino-core \
          -Dsonar.organization=linchpino \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=$SONARCLOUD_TOKEN \
          -Dsonar.coverage.exclusions=src/main/kotlin/com/linchpino/core/security/SecurityConfig*,src/main/kotlin/com/linchpino/core/exception/*,src/main/kotlin/com/linchpino/core/service/SpaceServiceProvider* \
          -Dsonar.verbose=true
              echo "coverage=$(grep -o -i -P '.{0,2}\%.{0,0}' target/site/jacoco/index.html | head -1 | cut -c1-2)" >> $GITHUB_OUTPUT
        env:
          GIT_HUB_TOKEN: ${{ secrets.GIT_HUB_TOKEN }}
          SONARCLOUD_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Check on failures
        if: steps.sonar-build-status.outcome != 'success' ||  steps.sonar-build-status.outputs.coverage < 50
        run: |
          echo "outcome":  ${{ steps.sonar-build-status.outcome }}
          echo "coverage": ${{ steps.sonar-build-status.outputs.coverage }}
          exit 1

  Build-and-push-to-GHCR:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: Sonar-Build
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@main

      - name: 'Login to GitHub Container Registry'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  Deploy-to-linchpino-core-server:
      runs-on: self-hosted
      permissions:
        contents: read
        packages: write
      needs: Build-and-push-to-GHCR
      steps:
        - name: Connect to linchpino-core on GCP instance
          env:
            PR_NUMBER: ${{ github.event.number }}
            ALLMYSECRETS: ${{ toJson(secrets) }}
            ALLMYVARS: ${{ toJSON(vars) }}
          run: |
            echo $ALLMYSECRETS > /opt/.linchpino-core-secrets 
            echo $ALLMYVARS > /opt/.linchpino-core-vars
            sudo sed -i "s/[{|}]//g" /opt/.linchpino-core-secrets && sudo sed -i "s/\": /=/g" /opt/.linchpino-core-secrets && sudo sed -i "s/[\"]//g" /opt/.linchpino-core-secrets && sudo sed -i "s/,/\\n/g" /opt/.linchpino-core-secrets && sudo sed -i "s/^ //g" /opt/.linchpino-core-secrets 
            sudo  sed -i "s/[{|}]//g" /opt/.linchpino-core-vars && sudo sed -i "s/\": /=/g" /opt/.linchpino-core-vars && sudo sed -i "s/[\"]//g" /opt/.linchpino-core-vars && sudo sed -i "s/,/\\n/g" /opt/.linchpino-core-vars && sudo sed -i "s/^ //g" /opt/.linchpino-core-vars 
            sudo echo "LANG=C.UTF-8" > /opt/actions-runner/.env && cat /opt/.linchpino-core-secrets /opt/.linchpino-core-vars >> /opt/actions-runner/.env
            cd ${{ secrets.WORK_DIR }}
            cat /opt/actions-runner/.env > .env
            sudo git fetch --all
            sudo git reset --hard
            echo "GITHUB_REF_NAME :" ${GITHUB_REF_NAME}
            echo "GITHUB_REF : "${GITHUB_REF##*/}
            if [ ${GITHUB_REF##*/} == "merge" ]; then
            currentBranch=pr-$PR_NUMBER
            sudo git checkout origin/development --  docker-compose.yml
            echo "the current branch is : " $currentBranch
            else
            currentBranch=$(echo ${GITHUB_REF_NAME} | sed "s/\//-/g")
            echo "the current branch is : " $currentBranch
            sudo git checkout origin/${GITHUB_REF_NAME}
            sudo git checkout origin/${GITHUB_REF_NAME} --  docker-compose.yml
            sudo git checkout origin/${GITHUB_REF_NAME} -- ./initscripts/init.sql
            fi
            sudo sed -i "s/POSTGRES_DB=.*/POSTGRES_DB=$currentBranch/" /opt/actions-runner/.env
            export POSTGRES_DB=$currentBranch
            sudo sed -i "s/POSTGRES_URL=.*/POSTGRES_URL=jdbc:postgresql:\/\/api-dev.linchpino.com:5432\/$currentBranch/" /opt/actions-runner/.env
            export POSTGRES_URL=jdbc:postgresql://api-dev.linchpino.com:5432/$currentBranch
            sudo sed -i "s/\$currentbranches/$currentBranch/g" ./initscripts/init.sql
            sudo sed -i "s/\/linchpino-core:.*/\/linchpino-core:$currentBranch/" docker-compose.yml
            cat /opt/actions-runner/.env > .env
            if [ ${GITHUB_REF##*/} == "development" ]; then
            sudo sed -i "s/#-/"-"/" docker-compose.yml
            fi
            docker-compose stop && docker-compose rm -f linchpino-core && docker-compose pull linchpino-core
            docker-compose up -d
